name: Flutter Tests

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.0'
          channel: 'stable'
          
      - name: Install dependencies
        run: flutter pub get
        
      - name: Analyze code
        run: flutter analyze
        
      - name: Format check
        run: dart format --set-exit-if-changed .
        
      - name: Run tests with coverage
        id: run-tests
        run: |
          flutter test --coverage --reporter=json > test-results.json
          flutter test --coverage --reporter=compact > test-results.txt
          echo "exit_code=$?" >> $GITHUB_OUTPUT
          
      - name: Generate coverage report
        if: steps.run-tests.outputs.exit_code == '0'
        run: |
          genhtml coverage/lcov.info -o coverage/html
          
      - name: Upload coverage to Codecov
        if: steps.run-tests.outputs.exit_code == '0'
        uses: codecov/codecov-action@v3
        with:
          file: coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          
      - name: Upload coverage report as artifact
        if: steps.run-tests.outputs.exit_code == '0'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/html/
          
      - name: Comment test results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // テスト結果を読み取り
            let testOutput = '';
            try {
              testOutput = fs.readFileSync('test-results.txt', 'utf8');
            } catch (error) {
              testOutput = 'テスト結果ファイルが見つかりませんでした。';
            }
            
            // テスト成功/失敗を判定
            const testSuccess = '${{ steps.run-tests.outputs.exit_code }}' === '0';
            const statusEmoji = testSuccess ? '✅' : '❌';
            const statusText = testSuccess ? '成功' : '失敗';
            
            // JSON結果を解析
            let testSummary = '';
            try {
              const jsonResults = JSON.parse(fs.readFileSync('test-results.json', 'utf8'));
              const totalTests = jsonResults.length;
              const passedTests = jsonResults.filter(test => test.result === 'success').length;
              const failedTests = totalTests - passedTests;
              
              testSummary = `📊 **テストサマリー**: ${passedTests}/${totalTests} テスト成功`;
              if (failedTests > 0) {
                testSummary += ` (${failedTests} 失敗)`;
              }
            } catch (error) {
              testSummary = '📊 **テストサマリー**: 解析できませんでした';
            }
            
            // カバレッジ情報を取得（成功時のみ）
            let coverageInfo = '';
            if (testSuccess) {
              try {
                const lcovContent = fs.readFileSync('coverage/lcov.info', 'utf8');
                const lines = lcovContent.split('\n');
                let totalLines = 0;
                let coveredLines = 0;
                
                lines.forEach(line => {
                  if (line.startsWith('SF:')) {
                    // ファイル開始
                  } else if (line.startsWith('LF:')) {
                    // 総行数
                    totalLines += parseInt(line.split(':')[1]);
                  } else if (line.startsWith('LH:')) {
                    // カバーされた行数
                    coveredLines += parseInt(line.split(':')[1]);
                  }
                });
                
                const coverage = totalLines > 0 ? ((coveredLines / totalLines) * 100).toFixed(2) : 0;
                coverageInfo = `📈 **カバレッジ**: ${coverage}% (${coveredLines}/${totalLines} 行)`;
              } catch (error) {
                coverageInfo = ' **カバレッジ**: 計算できませんでした';
              }
            }
            
            const comment = `## 🧪 テスト結果
            
            ${statusEmoji} **テストステータス**: ${statusText}
            
            ${testSummary}
            ${coverageInfo}
            
            ### 📋 実行されたチェック
            - ✅ コード分析 (flutter analyze)
            - ✅ フォーマットチェック (dart format)
            - ${testSuccess ? '✅' : '❌'} 単体テスト (flutter test)
            - ${testSuccess ? '✅' : '❌'} カバレッジ測定
            
            ${testSuccess ? `### 📁 カバレッジレポート
            カバレッジレポートは [Artifacts](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) からダウンロードできます。` : ''}
            
            ### 🔍 テスト詳細
            \`\`\`
            ${testOutput}
            \`\`\`
            
            ${!testSuccess ? '###  修正が必要
            テストが失敗しています。上記のエラーを確認して修正してください。' : ''}
            
            ---
            *このコメントは自動生成されています*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            }); 